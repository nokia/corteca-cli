# Application settings
# --------------------
# These will be defined per project scope. Any modifications you make to the
# global app settings will be picked up as defaults when creating a new
# application.
#
# app:
#     lang: <lang-template>       # an application template name
#     title: <application-title>  # an application title (will be used for Corteca cloud metadata)
#     name: <test-app>            # single word identifier which cannot contain
#                                 # spaces (will be used for artifact naming)
#     author: <author>            # application author (will be used for Corteca cloud metadata)
#     description: |
#       <application description> # multiline description (will be used for Corteca cloud metadata)
#     version: <version>          # application version (will be used for Corteca cloud metadata)
#     duid: <DUID>                # will be generated automatically from FQDN,
#                                 # and will be used to uniquely identify the application
#     options: {}                 # template specific options
#     env:                     # custom environment variables inside app container
#           <name>: <value>
#     dependencies:
#       compile:                  # Dependencies needed during compile
#         - <library1>
#         - <library2>
#        runtime:                 # Dependencies needed during runtime
#         - <runtime-lib1>
#         - <runtime-lib2>
#     entrypoint:


# Toolchain settings
# ------------------
# Build toolchain settings; these must exist in the system docker cache under
# the name specifed by the 'image' field below. Perform a `docker pull <image>`
# and optionally a `docker tag <old-name> <new-name>` to name your images appropriately.
build:
    # must contain entries in the form:
    #   image: <docker-image-name>
    #   <target-machine>: 
    toolchains:
        image: ghcr.io/nokia/corteca-toolchain:24.2.3
        architectures: 
            armv7l:
                platform: "linux/arm/v7"
            aarch64:
                platform: "linux/arm64"
            x86_64:
                platform: "linux/amd64"
    # default toolchain to use when building if none specifed
    default: aarch64
    options:
        # rootfs, produces a compressed root filesystem as the build output; 
        # oci, the output is an OCI image;
        # docker, for docker image output.
        outputType: rootfs
        # If true, generates a container with additional debugging tools 
        # to facilitate troubleshooting during development.
        debug: false
        # Do not inherit variables from the host environment (proxies etc)
        # skipHostEnv: false
        env:
            # Specify custom variables inside build environment
            # <name>: <value>
    crossCompile:
        enabled: true
        image: multiarch/qemu-user-static
        args: ["--reset", "-p", "yes"]
    dockerFileTemplate: |
        ARG MIRROR_REGISTRY=${MIRROR_REGISTRY}
        ARG DIST_USR=/dist/usr   
        FROM {{ .toolchain.image }} AS toolchain
        {{- if .build.options.env }}
        ENV{{ range $key, $value := .build.options.env }} {{ $key }}={{ $value }} {{ end }}     
        {{- end }}
        {{ if .build.options.debug }}ENV DEBUG_MODE=true{{end}}
        WORKDIR /app
        COPY . /app
        # Install compile dependencies
        RUN apk add --no-cache {{ range .app.dependencies.compile }}{{ . }} {{ end }}
        RUN make


        FROM ${MIRROR_REGISTRY}alpine:3.17.7 AS app_container
        ARG DIST_USR
        COPY --from=toolchain ${DIST_USR}/. /
        COPY --from=toolchain /app/target/noarch/. /
        COPY --from=toolchain /app/build/. /
        COPY --from=toolchain /app/target/. /target
        # Install runtime dependencies
        RUN apk add --no-cache {{ range .app.dependencies.runtime }}{{ . }} {{ end }}
        {{- if .build.options.debug }}gdb{{- end }} && \
            cp -av /target/$(uname -m)/. / && \
            apk list > /$(uname -m) && \
            rm -fr /target /var/cache/apk/* /tmp/* /var/tmp/* 
        {{ if not .build.options.debug }}
        # Cleanup
        RUN apk --purge del apk-tools alpine-keys && \
            rm -rf /linuxrc /lib/apk/ /root /media /var && \
            cd /bin && \
            rm -f arch ash base32 base64 busybox bbconfig cat chattr chgrp chmod chown \
                    cp cpio date dd df dmesg dnsdomainname dumpkmap echo ed egrep false \
                    fatattr fdflush fgrep fsync getopt grep gunzip gzip hostname ionice \
                    ipcalc iostat kbd_mode kill less link ln linux32 linux64 login ls \
                    lsattr lzop makemime mkdir mknod mktemp more mount mountpoint mpstat \
                    mv netstat nice pidof ping ping6 pipe_progress printenv ps pwd reformime \
                    rev rm rmdir run-parts sed setpriv setserial sleep stat stty su sh sync \
                    tar touch true umount uname usleep vi watch zcat
        {{ end }}


        FROM scratch AS final_stage
        {{- if .app.env }}
        ENV{{ range $key, $value := .app.env }} {{ $key }}={{ $value }} {{ end }}
        {{- end }}
        COPY --from=app_container / /
        ENTRYPOINT [ "{{ .app.entrypoint }}" ]


# Deploy settings
# ---------------
# Specify the commands to use when deploying an application artifact to a device
deploy:
    # a sequence (array) of commands that will be executed on the device; if
    # any command fails, sequence will be interrupted
    # TODO: document the available context variables
    sequence:
        # each entry must be in the form of:
        # - cmd: <command to execute>
        #   retries: <number>         # how many times to retry the cmd in case of failure
        #   delay: <milliseconds>     # delay before next command or retry
        #   expectedOutput: <output>  # if provided, return output of cmd will be compared with this
        #                             # value; if the don't match cmd will be considered failed
    # filename of deploy logs (for SSH)
    logFile: .deploy.log


# Publish targets (endpoints)
# ---------------------------
# Specify a set of endpoints where the application can be published (to be downloaded from)
# each entry must be in the form of:
#   <alias>:
#       method: <method>    # one of `listen`, `put`, `copy`
#       addr: <url>         # url of endpoint
#       auth: <type>        # authentication type; one of `basic`, `bearer`, `password`
#       token: <auth-token> # authentication token for `bearer` authentication
publish:
    local:
        addr: http://0.0.0.0:8080
        method: listen
#   webserver:
#       addr: https://upload.example.com/artifacts/
#       auth: basic
#       method: put


# Devices
# -------
# A set of devices to deploy the application artifact(s)
# each entry must be in the form of:
#   <alias>:
#       addr: <url>                         # url of device console (only `ssh` protocol is currently supported)
#       auth: <type>                        # authentication type; one of `password`, `publicKey`
#       privateKeyFile: <path/to/file/name> # path to keyfile for private key authentication
#       source:
#           publish: <alias>                # an alias to a target (see above) to publish the artifacts before deployment
#           url: <public-url>               # the public url to download the artifact(s) from inside the device
devices:
